// This code is generated by AwesomeParserGenerator2000 (by @lexzhe)

package calculator;

import java.util.*;

public class Parser {

    private int position = 0;
    private List<Token> data;

    public Parser(List<Token> data) {
        this.data = data;
    }

    public static class GrammarContext {
        public String text;
    }

    public static class ExprContext extends GrammarContext {
        private int localIndexRule = -1;

        
        public AContext A;
        public BContext B;

        public Tree tree = new Tree("Expr");

        public void process() {
            switch (localIndexRule) {

            }


        }
    }

    public static class AContext extends GrammarContext {
        public Tree tree = new Tree("A");
    }

    public static class BContext extends GrammarContext {
        public Tree tree = new Tree("B");
    }

    public static class NUMBERContext extends GrammarContext {
        public Tree tree = new Tree("NUMBER");
    }

    public static class PLUSContext extends GrammarContext {
        public Tree tree = new Tree("PLUS");
    }

    public static class STARSContext extends GrammarContext {
        public Tree tree = new Tree("STARS");
    }

    public static class MULTContext extends GrammarContext {
        public Tree tree = new Tree("MULT");
    }

    public static class LOGContext extends GrammarContext {
        public Tree tree = new Tree("LOG");
    }

    public static class DIVContext extends GrammarContext {
        public Tree tree = new Tree("DIV");
    }

    public static class MINUSContext extends GrammarContext {
        public Tree tree = new Tree("MINUS");
    }

    public static class LPContext extends GrammarContext {
        public Tree tree = new Tree("LP");
    }

    public static class RPContext extends GrammarContext {
        public Tree tree = new Tree("RP");
    }

    public ExprContext parseExpr() {
        ExprContext result = new ExprContext();
        switch (data.get(position).terminal) {
            case A:
                result = new ExprContext();
                result.localIndexRule = 0;
                result.A = parseA();
                result.tree.add(result.A.tree);
                return result;
            case B:
                result = new ExprContext();
                result.localIndexRule = 1;
                result.B = parseB();
                result.tree.add(result.B.tree);
                return result;

        }
        throw new IllegalStateException("Unexpected token " + data.get(position).terminal.name() + " at position: " + position);

    }


    public AContext parseA() {
        AContext result = new AContext();
        result.tree.text = data.get(position).text;
        result.text = data.get(position++).text;
        return result;
    }

    public BContext parseB() {
        BContext result = new BContext();
        result.tree.text = data.get(position).text;
        result.text = data.get(position++).text;
        return result;
    }

    public NUMBERContext parseNUMBER() {
        NUMBERContext result = new NUMBERContext();
        result.tree.text = data.get(position).text;
        result.text = data.get(position++).text;
        return result;
    }

    public PLUSContext parsePLUS() {
        PLUSContext result = new PLUSContext();
        result.tree.text = data.get(position).text;
        result.text = data.get(position++).text;
        return result;
    }

    public STARSContext parseSTARS() {
        STARSContext result = new STARSContext();
        result.tree.text = data.get(position).text;
        result.text = data.get(position++).text;
        return result;
    }

    public MULTContext parseMULT() {
        MULTContext result = new MULTContext();
        result.tree.text = data.get(position).text;
        result.text = data.get(position++).text;
        return result;
    }

    public LOGContext parseLOG() {
        LOGContext result = new LOGContext();
        result.tree.text = data.get(position).text;
        result.text = data.get(position++).text;
        return result;
    }

    public DIVContext parseDIV() {
        DIVContext result = new DIVContext();
        result.tree.text = data.get(position).text;
        result.text = data.get(position++).text;
        return result;
    }

    public MINUSContext parseMINUS() {
        MINUSContext result = new MINUSContext();
        result.tree.text = data.get(position).text;
        result.text = data.get(position++).text;
        return result;
    }

    public LPContext parseLP() {
        LPContext result = new LPContext();
        result.tree.text = data.get(position).text;
        result.text = data.get(position++).text;
        return result;
    }

    public RPContext parseRP() {
        RPContext result = new RPContext();
        result.tree.text = data.get(position).text;
        result.text = data.get(position++).text;
        return result;
    }


}
